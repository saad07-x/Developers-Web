git init
npm init   //entry point: server.js
npm i express express-validator bcryptjs config gravatar jsonwebtoken mongoose request
npm i -D nodemon concurrently    //concurrently helps run react and express at the same time.

create server.js                //We make this as the fist file that runs.
create config>default.json      //This will help us to create global uri which can be used later on.
create config>db.js             //In this file we will do the mongodb connection
create routes>api>profile.js post.js auth.js and users.js   //we can do all this work in server.js but it will get messy.





---USER---

create models and mongoose schema. model > User.js 
//-----> Models are the rock band — it is how your API creates, queries, updates, and deletes from your database.
//----> Mongoose Schema is the drummer in the band — it defines the structure of the document, the default values, its validators and other things.  
user.js done //This will be used while registering. To validate emails and stuff go to the link: express-validator.github.io

JWT TOKEN
in default.js add     "jwtSecret": "mysecrettoken" 
then make a middleware for authetication and write code in auth api.
-This all will help us to know which user is logged in since we res user.
In the auth route we also add the login verification system



---PROFILE----
Create the model.
First get if the profile is available or not
Post the details
Get all profiles
Get profile by user ID
Delete profile
Add experience 
Add education


---POST---
Create a Post schema. 
Comments, likes and posting models




Notes:
req.user.id will contain the currently logged in id.
Post show is private but profile show is public




FRONT-END
On terminal: npx crate-react-app client //This will create a react app in client folder.
Then in pacakge.json add: "client": "npm start --prefix client",
    "dev": "concurrently \"npm run server\"\"npm run client\""

    in the script section
In client: npm i axios react-router-dom redux react-redux redux-thunk redux-devtools-extension moment react-moment    
Delete client gitignore folder and in client: rm -rf .git
Delete app.test.js, index.css and logo.svg files from src folder!
Then in app.js replace the whole code with:
""" import React, { Fragment } from "react";
import "./App.css";

const App = () => (
  <Fragment>
    <h1>App</h1>
  </Fragment>
);

export default App; """

In components folder there are the components of the website
IN register component we post the details to backend api's using axios

*Axios helps us to connect frontend with node.js


Create store.js inside src. This is a redux store.
Create a folder reducers and inside that create index.js
The folder reducers will contain all the reducers

Inside src make a folder action which will contain all the actions for e.g: alert. Then you also need to create a layout for that alert component.
Make a index.js file in reducers which will contain the reducers that can be used.

mapStatetoProp function is used. //search.

REGISTERATION:
Create reducer for auth: 1)Add variables in type.js 2)create auth.js in action 3)Create reducer for auth. 
4)Modify Register component (In Register component there are 4 steps: 1) import 2)add to export 3)Add prop 4)Add to peremeter in top. Then just call it)

Token should be continously be loaded: We create settoken.js in utils
add this to auth.js action and auth.js reducers
*from component > actions > reducers


LOGIN:
1)Modify auth.js in actions
2)Modify auth.js in reducers (it tells what to if login success or login failed occured. just like in registeration)
3)Add the effects to component in Login.js


LOGOUT:
1)create type
2)go to auth actions and create function
3)go to auth reducer and create cases
4)then add logout in navbar
Also created clearprofile type.

PRIVATE ROUTE:
Created a component PrivateRoute which will block non logged in people to access PRIVATE Routes. (e.g Dashboard)




import { connect } from "react-redux";
import PropTypes from 'prop-types';
If these 2 lines are on top that means on that page there is something that works when authenticated

Few changes in landing. not working without removing export :/

Created a spinner component. And added to dashboard

Tip: In app.js don't use {} while importing components
Tip2: When you take in history object, it will help you redirect to the page you came from.


Dashboard created. 
1)Create for add or update profile.
2)Functions added in profile.js in actions. 


PROFILE
1)Add profile if not already. Else edit.
2)Made actions and reducers in same file. But components seprate for both.

